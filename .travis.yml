language: minimal
jobs:
  stages:
    - build_and_pack
    - hello_world
      # if: fork
  #   - deploy_continuous
  #     if: branch IN (linux-CD, develop)

    # - deploy_draft
    #   if: branch = master  

  env:
    global:
      # include $HOME/.local/bin for `aws`
      - PATH=$HOME/.local/bin:$PATH

  before_install:
    # set up awscli packages
    - pip install --user awscli
    - mkdir -p ~/$TRAVIS_BUILD_NUMBER
    - aws s3 sync s3://travis-build-stages-shared-storage-test/$TRAVIS_BUILD_NUMBER ~/$TRAVIS_BUILD_NUMBER

  matrix:
    include:
    - os: linux
      # before_install:
      # - openssl aes-256-cbc -K $encrypted_346e8310fcb0_key -iv $encrypted_346e8310fcb0_iv -in travisbuilds.enc -out travisbuilds -d

      language: minimal
      services:
        - docker
      before_install:
        - docker pull fritzing/build:xenial
      script:
        - docker/release-linux.sh 0.9.4debug-continuous

      deploy:
        provider: releases
        api_key:
          secure: mC16qH9Jp5a82bhSYwR/AmDFnJpY7XffXzUhQkXXfgRvjmVDrfjTr0/LaQpOb3EWzjA1LbiVdm/9GhJZJ2Sj/Nsawn+anIaJ1mVt4839SsWCC4MsNfvQBawWnug0HXyjCmymNRbtCz38WmONPL0fQaHbC+eAADrpUzqM1jC/Zs7mCkWKNFGwXD4ekbxTNGmhbAbv/yjqC5rapjcMRpGUlIBUqwylYCck59CW4CR3LKI85USLsQMn/vL18jnMucHRfdHcGz2u4SNwYB6H+KKc8J2hCeKhQQbiAbHeN4SAb3ycWW1/hyoP0s7sHnOrMzJsUtKehP9HDfOoHjC1QDT894l8PJMqiLpKVYjP9wYfuTs/1MvAaIOVl6dJuuAlVFVDDno9UDmyHhbqyYDdYuZacqLLdoIHW6kqAmFekf1Ey6Nn7y0MR8g3+G8/R+NOwpnu/O68iYVHvYYDCubss6Ye6VjvTlvXAg/DOtrnDyLjzjATek1K25wN9R5WnFQzkHqELtCMouAq4AtdZquqH89tLlkbaolDuXStstDDFukla0+FcI+Hj5xcwxqae2cwyCgO2wJNgGSDZb7gsRPp0LkYhAtS7I7PvbxsGNxnAq1HlVyEAB5C5S+de1l2dgkXVBE74lo7mj9kA1McYQfvPp8uCt9AWJ5JnAngvGQt05Hi+mw=
        file: "fritzing-0.9.4debug-continuous.linux.AMD64.tar.bz2"
        on:
          repo: KjellMorgenstern/fritzing-app
          branch: linux-CD
        skip_cleanup: true
        draft: true

    - os: osx
      language: cpp
      osx_image: xcode10.2
      cache:
        directories:
          ../libgit2/build

      addons:
        homebrew:
          packages:
            - qt5

      before_install:
        - mkdir -p ../libgit2/build
        - wget -q -O - https://github.com/libgit2/libgit2/archive/v0.28.1.tar.gz | tar xz && mv libgit2-0.28.1/* ../libgit2/
        - (cd ../libgit2/build && cmake -D BUILD_SHARED_LIBS=OFF .. && cmake --build .)
        - (cd src/lib && wget -q -O - https://dl.bintray.com/boostorg/release/1.70.0/source/boost_1_70_0.tar.bz2 | tar xj)
        - xcrun -sdk macosx --show-sdk-path
      script:
        - tools/deploy_fritzing_mac.sh

    - os: osx
      language: objective-c
      osx_image: xcode10.1
      cache:
        directories:
          ../libgit2/build

      addons:
        homebrew:
          packages:
            - qt5

      before_install:
        - mkdir -p ../libgit2/build
        - wget -q -O - https://github.com/libgit2/libgit2/archive/v0.28.1.tar.gz | tar xz && mv libgit2-0.28.1/* ../libgit2/
        - (cd ../libgit2/build && cmake -D BUILD_SHARED_LIBS=OFF .. && cmake --build .)
        - (cd src/lib && wget -q -O - https://dl.bintray.com/boostorg/release/1.70.0/source/boost_1_70_0.tar.bz2 | tar xj)
        - xcrun -sdk macosx --show-sdk-path
      script:
        - tools/deploy_fritzing_mac.sh

    # Fails. We did not find a good way to start a developer command prompt yet.
    - os: windows
      language: cpp
      env:
        # - NMAKE_PATH="/c/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/amd64/"
        # /c/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/amd64/nmake.exe
        # /c/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/nmake.exe
        # /c/Program Files (x86)/Microsoft Visual Studio/2017/BuildTools/VC/Tools/MSVC/14.16.27023/bin/Hostx64/x64/nmake.exe
        # /c/Program Files (x86)/Microsoft Visual Studio/2017/BuildTools/VC/Tools/MSVC/14.16.27023/bin/Hostx86/x86/nmake.exe
        # - RC_PATH="/c/Program Files (x86)/Windows Kits/10/bin/x64/"
        # /c/Program Files (x86)/Windows Kits/10/bin/x86/
      before_install:
        - curl -L http://download.qt-project.org/official_releases/online_installers/qt-unified-windows-x86-online.exe --output qt-installer.exe
        - ./qt-installer.exe --script ./tools/qt_installer_noninteractive.qs
        - curl -fsSL https://github.com/libgit2/libgit2/archive/v0.28.1.zip -o libgit2.zip && 7z x libgit2.zip && mv libgit2-0.28.1 ../libgit2
        - (mkdir ../libgit2/build64 && cd ../libgit2/build64 && cmake -G "Visual Studio 15 2017 Win64" .. && cmake --build . --config Release)
        - (cd src/lib && curl -L https://dl.bintray.com/boostorg/release/1.70.0/source/boost_1_70_0.tar.bz2 | tar xj)

      script:
          - tools/build-windows.bat
          # - /c/Program\ Files\ \(x86\)/Microsoft\ Visual\ Studio/2017/BuildTools/Common7/Tools/VsDevCmd.bat
          # - cat /c/Program\ Files\ \(x86\)/Microsoft\ Visual\ Studio/2017/BuildTools/VC/Auxiliary/Build/vcvars64.bat
          # - tools/release_fritzing.bat 0.9.4b 64 2017
          # - export PATH="$NMAKE_PATH:$RC_PATH:$PATH"
